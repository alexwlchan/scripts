#!/usr/bin/env bash
# Switch to my main branch and pull any changes from the remote.

set -o errexit
set -o nounset

ROOT="$(git rev-parse --show-toplevel)"

# Checking for the branch first is a bit slower, but avoids a potentially
# confusing warning immediately before the pull:
#
#     Already on 'main'
#     Your branch is up to date with 'origin/main'.
#
if [[ $(gcb) != $(_get_primary_branch) ]]
then
  print_info "-> git checkout $(_get_primary_branch) (was on $(gcb))"
  git checkout "$(_get_primary_branch)"
  echo ""
fi

# This avoids any clashes with other programs called "gp", e.g. at one
# point I had gitpython in my PATH
$(dirname "$0")/gp

echo ""

cleanup_branches

# If we're in one of my Jekyll repositories, and the Gemfile has changed,
# I need to update my local Ruby installation.
if [[ $(groot) = ~/repos/alexwlchan.net ]] || \
   [[ $(groot) = ~/repos/books.alexwlchan.net ]]
then
  if grep -q 'Gemfile' "$ROOT/.git/names_diff.txt"
  then
    echo ""

    print_info "-> Updating Ruby dependencies"

    echo ""

    print_info "-> bundle install"
    bundle install \
      | grep -v Using \
      | grep -v "to see where a bundled gem is installed." \
      | grep -v "you directly depend on are looking for funding." \
      | grep -v "you directly depend on is looking for funding." \
      | grep -v "bundle fund"

    echo ""

    print_info "-> BUNDLE_WITH=lint bundle install"
    BUNDLE_WITH=lint bundle install \
      | grep -v Using \
      | grep -v "to see where a bundled gem is installed." \
      | grep -v "you directly depend on are looking for funding." \
      | grep -v "you directly depend on is looking for funding." \
      | grep -v "bundle fund"
  fi
fi
